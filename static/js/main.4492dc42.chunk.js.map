{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/CommonActions/AppActions.ts","common/utils/error-utils.ts","features/TodolistsList/Todolist/todolists-reducer.ts","features/TodolistsList/Todolist/Task/tasks-reducer.ts","features/TodolistsList/Todolist/Task/index.ts","features/TodolistsList/Todolist/index.ts","features/Login/auth-reducer.ts","features/Login/index.ts","features/Application/application-reducer.ts","features/Application/index.ts","app/rootReducer.ts","app/store.ts","common/hooks/hooks.ts","features/Application/applicationSelectors.ts","features/Login/authSelectors.ts","common/components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Todolist/todolistSelectors.ts","common/components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","common/components/AddItemForm/AddItemForm.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/Todolist/Task/taskSelectors.ts","features/TodolistsList/TodolistsList.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCodes","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","todolistId","p","put","taskTitle","taskId","appActions","changeAppTheme","createAction","setAppStatus","setAppError","handleServerNetworkError","error","dispatch","status","message","handleServerAppError","messages","length","fetchTodolists","createAsyncThunk","arg","rejectWithValue","res","forEach","tl","fetchTasks","id","todolists","removeTodolist","changeTodolistEntityStatus","entityStatus","resultCode","successfully","addTodolist","todolist","item","changeTodolistTitle","param","todolistsAsyncActions","todolistsSlice","createSlice","name","initialState","reducers","changeFilter","state","action","index","findIndex","payload","filter","wipeTodolistsData","extraReducers","builder","addCase","fulfilled","map","splice","unshift","actions","tasks","items","removeTask","changeTaskEntityStatus","addTask","updateTasks","getState","task","find","t","description","priority","startDate","deadline","model","tasksAsyncActions","tasksSlice","todoListId","tasksActions","tasksReducer","reducer","todolistsActions","todolistsReducer","login","thunkAPI","errors","fieldsErrors","undefined","logout","authAsyncActions","authSlice","isLoggedIn","setLoggedIn","value","authActions","authReducer","initializeApp","appAsyncActions","appReducer","colorTheme","isInitialized","rootReducer","combineReducers","app","auth","store","configureStore","useAppDispatch","useDispatch","useAppSelector","useSelector","useActions","useMemo","bindActionCreators","selectIsInitialized","selectStatus","selectColorTheme","selectError","selectIsLoggedIn","Alert","React","props","ref","elevation","variant","ErrorSnackbars","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","selectTodolists","EditableSpan","memo","console","log","useState","editMode","setEditMode","text","setText","offEditMode","trim","onChange","disabled","TextField","e","currentTarget","onBlur","onKeyDown","key","autoFocus","onDoubleClick","style","overflowWrap","Task","isDisabled","removeTasksHandler","useCallback","onChangeCheckboxHandler","checked","Completed","New","editTaskTitleHandler","ListItem","disableGutters","divider","className","Checkbox","color","size","IconButton","onClick","Delete","fontSize","AddItemForm","addItem","itemTitle","setItemTitle","setError","addTaskHandler","label","helperText","marginLeft","AddBox","Todolist","demo","filterTasksHandler","editTodolistTitleHandler","newTitle","tasksToRender","padding","renderFilterButton","buttonFilter","Button","Paper","margin","position","wordWrap","right","top","List","TodolistsList","useEffect","addTodolistHandler","todolistTitle","todolistsToRender","Grid","Box","container","spacing","flexWrap","overflowX","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","justifyContent","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","getFieldProps","touched","type","autoComplete","FormControlLabel","control","App","theme","createTheme","palette","mode","primary","main","secondary","ThemeProvider","CssBaseline","AppBar","Toolbar","edge","Menu","Typography","BrightnessHigh","Brightness4","LinearProgress","left","Container","fixed","path","element","textAlign","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4492dc42.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'a3decdb3-48b2-455e-b07a-b72b7d94ecdb'\r\n    }\r\n})\r\n\r\n// API\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ id: number }>>, LoginParamsType>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<'', AxiosResponse<ResponseType<{ id: number, email: string, login: string }>>, {}>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<'', AxiosResponse<TodolistType[]>, {}>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ item: TodolistType }>>, { title: string }>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(p: { todolistId: string, title: string }) {\r\n        return instance.put<'', AxiosResponse<ResponseType>, { title: string }>(`todo-lists/${p.todolistId}`, {title: p.title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<'', AxiosResponse<GetTasksType>, {}>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(p: { todolistId: string, taskTitle: string }) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>(`todo-lists/${p.todolistId}/tasks`, {title: p.taskTitle})\r\n    },\r\n    deleteTask(p: { todolistId: string, taskId: string }) {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>(`todo-lists/${p.todolistId}/tasks/${p.taskId}`)\r\n    },\r\n    updateTask(p: { todolistId: string, taskId: string }, data: UpdateTaskModelType) {\r\n        return instance.put<'', AxiosResponse<ResponseType<{ item: TaskType }>>, UpdateTaskModelType>(`todo-lists/${p.todolistId}/tasks/${p.taskId}`, data)\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldsErrorsType = { field: string, error: string };\r\nexport type ResponseType<T = {}> = {\r\n    data: T\r\n    messages: string[]\r\n    fieldsErrors?: FieldsErrorsType[]\r\n    resultCode: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCodes {\r\n    successfully = 0,\r\n    error = 1,\r\n    captcha_required = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import {createAction} from '@reduxjs/toolkit';\r\nimport {ColorThemeType, RequestStatusType} from '../Application/application-reducer';\r\n\r\nconst changeAppTheme = createAction<{ colorTheme: ColorThemeType }>('app/changeAppTheme')\r\nconst setAppStatus = createAction<{ status: RequestStatusType }>('app/setAppStatus')\r\nconst setAppError = createAction<{ error: null | string }>('app/setAppError')\r\n\r\nexport const appActions = {\r\n    changeAppTheme,\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {ResponseType} from '../../api/todolists-api';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {AnyAction} from 'redux';\r\nimport {AppDispatch} from '../../features/Application/AppTypes';\r\nimport {appActions} from '../../features/CommonActions/AppActions';\r\n\r\n\r\nconst {setAppStatus, setAppError} = appActions\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: AppDispatch | ThunkDispatch<unknown, unknown, AnyAction>) => {\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n    dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatch |  ThunkDispatch<unknown, unknown, AnyAction>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}","import {ResultCodes, todolistsAPI, TodolistType} from '../../../api/todolists-api';\r\nimport {RequestStatusType} from '../../Application/application-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../common/utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {appActions} from '../../CommonActions/AppActions';\r\nimport {fetchTasks} from './Task/tasks-reducer';\r\n\r\n\r\nconst {setAppStatus} = appActions\r\n\r\n// thunk\r\nexport const fetchTodolists = createAsyncThunk('todolists/fetchTodolists', async (arg, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        res.data.forEach((tl) => dispatch(fetchTasks(tl.id)))\r\n        return {todolists: res.data}\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const removeTodolist = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({todolistId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const addTodolist = createAsyncThunk('todolists/addTodolist', async (title: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nconst changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { todolistId: string, title: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({todolistId: param.todolistId, entityStatus: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param)\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            dispatch(changeTodolistEntityStatus({todolistId: param.todolistId, entityStatus: 'succeeded'}))\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            dispatch(changeTodolistEntityStatus({todolistId: param.todolistId, entityStatus: 'failed'}))\r\n            return rejectWithValue(null)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const todolistsAsyncActions = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}\r\n\r\nexport const todolistsSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as TodolistDomainType[],\r\n    reducers: {\r\n        changeFilter: (state, action: PayloadAction<{ todolistId: string, filter: FilterType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus: (state, action: PayloadAction<{ todolistId: string, entityStatus: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        wipeTodolistsData: (state, action: PayloadAction) => {\r\n            return []\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todolistId)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistEntityStatus, wipeTodolistsData} = todolistsSlice.actions\r\n\r\n// types\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'","import {ResultCodes, TaskType, todolistsAPI} from '../../../../api/todolists-api';\r\nimport {RequestStatusType} from '../../../Application/application-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../../common/utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {RootStateType} from '../../../Application/AppTypes';\r\nimport {appActions} from '../../../CommonActions/AppActions';\r\nimport {addTodolist, fetchTodolists, removeTodolist, wipeTodolistsData} from '../todolists-reducer';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst {setAppStatus} = appActions\r\n\r\n// thunk\r\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolistId, tasks: res.data.items}\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst removeTask = createAsyncThunk('tasks/removeTask', async (param: { todolistId: string, taskId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTaskEntityStatus({...param, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(param)\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst addTask = createAsyncThunk('tasks/addTask', async (param: { todolistId: string, taskTitle: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param)\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst updateTasks = createAsyncThunk('tasks/updateTask', async (param: { todolistId: string, taskId: string, model: UpdateDomainTaskModelType }, {\r\n    dispatch,\r\n    rejectWithValue,\r\n    getState\r\n}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTaskEntityStatus({todolistId: param.todolistId, taskId: param.taskId, status: 'loading'}))\r\n\r\n    const state = getState() as RootStateType\r\n    const task = state.tasks[param.todolistId].find((t: any) => t.id === param.taskId)\r\n\r\n    if (!task) {\r\n        return rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask({todolistId: param.todolistId, taskId: param.taskId}, {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...param.model\r\n        })\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(changeTaskEntityStatus({\r\n                todolistId: param.todolistId,\r\n                taskId: param.taskId,\r\n                status: 'succeeded'\r\n            }))\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolistId: param.todolistId, taskId: param.taskId, task: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            dispatch(changeTaskEntityStatus({\r\n                todolistId: param.todolistId,\r\n                taskId: param.taskId,\r\n                status: 'failed'\r\n            }))\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const tasksAsyncActions = {fetchTasks, removeTask, addTask, updateTasks}\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        changeTaskEntityStatus: (state, action: PayloadAction<{ todolistId: string, taskId: string, status: RequestStatusType }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], entityStatus: action.payload.status}\r\n            }\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.todolistId]\r\n            })\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl) => state[tl.id] = [])\r\n            })\r\n            .addCase(wipeTodolistsData, () => {\r\n                return {}\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks.map(t => ({...t, entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift({...action.payload, entityStatus: 'idle'})\r\n            })\r\n            .addCase(updateTasks.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...action.payload.task, entityStatus: 'idle'}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nconst {changeTaskEntityStatus} = tasksSlice.actions\r\n\r\n// types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todolistID: string]: TaskDomainType[]\r\n}","import {tasksAsyncActions, tasksSlice} from './tasks-reducer'\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst tasksReducer = tasksSlice.reducer\r\n\r\nexport {tasksActions, tasksReducer}","import {todolistsAsyncActions, todolistsSlice} from './todolists-reducer'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\n\r\nconst todolistsReducer = todolistsSlice.reducer\r\n\r\nexport {todolistsActions, todolistsReducer}","import {authAPI, LoginParamsType, ResultCodes} from '../../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../common/utils/error-utils';\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {todolistsActions} from '../TodolistsList/Todolist';\r\nimport {ThunkErrorType} from '../Application/AppTypes';\r\nimport {appActions} from '../CommonActions/AppActions';\r\n\r\nconst {wipeTodolistsData} = todolistsActions\r\nconst {setAppStatus} = appActions\r\n\r\n// thunk\r\nconst login = createAsyncThunk<undefined, LoginParamsType, ThunkErrorType>('auth/login', async (param, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nconst logout = createAsyncThunk('auth/logout', async (arg, thunkAPI) => {\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(wipeTodolistsData())\r\n            dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue({})\r\n    }\r\n})\r\n\r\nexport const authAsyncActions = {login, logout}\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})","import {authAsyncActions, authSlice} from './auth-reducer';\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...authSlice.actions\r\n}\r\n\r\nconst authReducer = authSlice.reducer\r\n\r\nexport {authActions, authReducer}","import {authAPI, ResultCodes} from '../../api/todolists-api';\r\nimport {handleServerNetworkError} from '../../common/utils/error-utils';\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\r\nimport {AxiosError} from 'axios';\r\nimport {authActions} from '../Login';\r\nimport {appActions} from '../CommonActions/AppActions';\r\n\r\n\r\nconst {setLoggedIn} = authActions\r\nconst {changeAppTheme, setAppStatus, setAppError} = appActions\r\n\r\n//thunk\r\nconst initializeApp = createAsyncThunk('app/initialize', async (arg, {dispatch}) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === ResultCodes.successfully) {\r\n            dispatch(setLoggedIn({value: true}))\r\n        } else {\r\n            // ignore auth me server error\r\n            // handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        const error = e as AxiosError\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n})\r\n\r\nexport const appAsyncActions = {initializeApp}\r\n\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        colorTheme: 'light' as ColorThemeType,\r\n        status: 'idle' as RequestStatusType,\r\n        error: null as null | string,\r\n        isInitialized: false\r\n    },\r\n    reducers: {\r\n        /* changeAppTheme(state, action: PayloadAction<{ colorTheme: ColorThemeType }>) {\r\n             state.colorTheme = action.payload.colorTheme === 'light' ? 'dark' : 'light'\r\n         },\r\n         setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n             state.status = action.payload.status\r\n         },\r\n         setAppError(state, action: PayloadAction<{ error: null | string }>) {\r\n             state.error = action.payload.error\r\n         }*/\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(changeAppTheme, (state, action) => {\r\n                state.colorTheme = action.payload.colorTheme === 'light' ? 'dark' : 'light'\r\n            })\r\n            .addCase(setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type ColorThemeType = 'dark' | 'light'\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppInitialStateType = ReturnType<typeof appSlice.getInitialState>","import {appSlice, appAsyncActions} from './application-reducer';\r\n\r\nconst appReducer = appSlice.reducer\r\n\r\nexport {appAsyncActions, appReducer}","import {combineReducers} from 'redux';\r\nimport {tasksReducer} from '../features/TodolistsList/Todolist/Task';\r\nimport {todolistsReducer} from '../features/TodolistsList/Todolist';\r\nimport {authReducer} from '../features/Login';\r\nimport {appReducer} from '../features/Application';\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})","import {configureStore} from '@reduxjs/toolkit';\r\nimport {rootReducer} from './rootReducer';\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux';\r\nimport {useMemo} from 'react';\r\nimport {AppDispatch, RootStateType} from '../../features/Application/AppTypes';\r\n\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    return useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [actions, dispatch])\r\n}","import {ColorThemeType, RequestStatusType} from './application-reducer';\r\nimport {RootStateType} from './AppTypes';\r\n\r\nexport const selectIsInitialized = (state: RootStateType): boolean => state.app.isInitialized\r\nexport const selectStatus = (state: RootStateType): RequestStatusType => state.app.status\r\nexport const selectColorTheme = (state: RootStateType): ColorThemeType => state.app.colorTheme\r\nexport const selectError = (state: RootStateType): null | string => state.app.error","import {RootStateType} from '../Application/AppTypes';\r\n\r\nexport const selectIsLoggedIn = (state: RootStateType): boolean => state.auth.isLoggedIn","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useActions, useAppSelector} from '../../hooks/hooks';\r\nimport {selectError} from '../../../features/Application/applicationSelectors';\r\nimport {appActions} from '../../../features/CommonActions/AppActions';\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbars = () => {\r\n\r\n    const error = useAppSelector(selectError)\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAppError({error: null})\r\n\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}\r\n                  anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {TodolistDomainType} from './todolists-reducer';\r\nimport {RootStateType} from '../../Application/AppTypes';\r\n\r\nexport const selectTodolists = (state: RootStateType):TodolistDomainType[] => state.todolists","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n    disabled: boolean\r\n}\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [text, setText] = useState(props.value)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        text.trim() !== '' && props.onChange(text)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && offEditMode()\r\n    }\r\n\r\n    return editMode && !props.disabled\r\n        ?\r\n        <TextField value={text}\r\n                   onChange={onChangeHandler}\r\n                   onBlur={offEditMode}\r\n                   onKeyDown={onKeyDownHandler}\r\n                   autoFocus/>\r\n        : <span onDoubleClick={onEditMode} style={{overflowWrap: 'anywhere'}}>{props.value}</span>\r\n})","import React, {ChangeEvent, FC, memo, useCallback} from 'react';\r\nimport {TaskDomainType} from './tasks-reducer';\r\nimport {TaskStatuses} from '../../../../api/todolists-api';\r\nimport {useActions} from '../../../../common/hooks/hooks';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {tasksActions} from './index';\r\nimport {EditableSpan} from '../../../../common/components/EditableSpan/EditableSpan';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    todolistId: string\r\n    disabled: boolean\r\n}\r\nexport const Task: FC<TaskPropsType> = memo(({task, todolistId, disabled}) => {\r\n    const {removeTask, updateTasks} = useActions(tasksActions)\r\n\r\n    const isDisabled = task.entityStatus === 'loading'\r\n\r\n    const removeTasksHandler = useCallback(() => {\r\n        removeTask({todolistId, taskId: task.id})\r\n    }, [removeTask, todolistId, task.id])\r\n\r\n    const onChangeCheckboxHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTasks({\r\n            todolistId,\r\n            taskId: task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}\r\n        })\r\n    }, [updateTasks, task.id, todolistId])\r\n\r\n    const editTaskTitleHandler = useCallback((taskTitle: string) => {\r\n        updateTasks({todolistId, taskId: task.id, model: {title: taskTitle}})\r\n    }, [updateTasks, todolistId, task.id])\r\n\r\n    return (\r\n        <ListItem disableGutters divider className={task.status === TaskStatuses.Completed ? 'task isDone' : 'task'}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeCheckboxHandler}\r\n                      color={'primary'}\r\n                      size={'small'}\r\n                      disabled={isDisabled}/>\r\n            <IconButton onClick={removeTasksHandler}\r\n                        color={'secondary'}\r\n                        size={'small'}\r\n                        disabled={isDisabled}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <EditableSpan value={task.title} onChange={editTaskTitleHandler}\r\n                          disabled={disabled || isDisabled}/>\r\n        </ListItem>)\r\n})","import React, {ChangeEvent, FC, KeyboardEvent, memo, useState} from 'react';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport TextField from '@mui/material/TextField';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm: FC<AddItemFormPropsType> = memo(({addItem, disabled}) => {\r\n    console.log('AddItemForm called')\r\n\r\n    const [itemTitle, setItemTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTaskHandler = () => {\r\n        if (itemTitle.trim() === '') {\r\n            setError('Title is required')\r\n            setItemTitle('')\r\n            return\r\n        }\r\n        addItem(itemTitle.trim())\r\n        setItemTitle('')\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n        error && setError('')\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && addTaskHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       size={'small'}\r\n                       label={'Title'}\r\n                       value={itemTitle}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={onKeyDownHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n                       style={{width: '80%'}}/>\r\n            <IconButton onClick={addTaskHandler} color={'primary'} disabled={disabled} style={{marginLeft: '5px'}}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useCallback,} from 'react';\r\nimport {FilterType, TodolistDomainType} from './todolists-reducer';\r\nimport {tasksActions} from './Task';\r\nimport {TaskStatuses} from '../../../api/todolists-api';\r\nimport {useActions, useAppSelector} from '../../../common/hooks/hooks';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport List from '@mui/material/List';\r\nimport Paper from '@mui/material/Paper';\r\nimport {Delete} from '@mui/icons-material';\r\nimport {selectTasks} from './Task/taskSelectors';\r\nimport {todolistsActions} from './index';\r\nimport {Task} from './Task/Task';\r\nimport {AddItemForm} from '../../../common/components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../common/components/EditableSpan/EditableSpan';\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist: FC<TodolistPropsType> = memo(({todolist, demo = false}) => {\r\n    console.log('Todolist called')\r\n\r\n    let tasks = useAppSelector(selectTasks(todolist.id))\r\n    const {addTask} = useActions(tasksActions)\r\n    const {changeFilter, removeTodolist, changeTodolistTitle} = useActions(todolistsActions)\r\n\r\n    const isDisabled = todolist.entityStatus === 'loading'\r\n\r\n    switch (todolist.filter) {\r\n        case 'active':\r\n            tasks = tasks.filter(t => t.status === TaskStatuses.New)\r\n            break;\r\n        case 'completed':\r\n            tasks = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            break;\r\n    }\r\n\r\n    const filterTasksHandler = useCallback((value: FilterType) => {\r\n        changeFilter({todolistId: todolist.id, filter: value})\r\n    }, [changeFilter, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        removeTodolist(todolist.id)\r\n    }\r\n\r\n    const addTaskHandler = useCallback((taskTitle: string) => {\r\n        addTask({todolistId: todolist.id, taskTitle})\r\n    }, [addTask, todolist.id])\r\n\r\n\r\n    const editTodolistTitleHandler = useCallback((newTitle: string) => {\r\n        changeTodolistTitle({todolistId: todolist.id, title: newTitle})\r\n    }, [changeTodolistTitle, todolist.id])\r\n\r\n    const tasksToRender = tasks && tasks.length\r\n        ? tasks.map(task => <Task key={task.id} task={task} todolistId={todolist.id}\r\n                                  disabled={isDisabled}/>)\r\n        : <div style={{padding: '10px', color: '#9c9c9c'}}>No tasks in this list</div>\r\n\r\n    /* useEffect(() => {\r\n         if (demo) {\r\n             return;\r\n         }\r\n         dispatch(fetchTasksTC(todolist.id))\r\n     }, [dispatch, todolist.id, demo])*/\r\n\r\n    const renderFilterButton = (title: string, buttonFilter: FilterType) => {\r\n        return <Button size={'small'} variant={'contained'}\r\n                       color={todolist.filter === buttonFilter ? 'secondary' : 'primary'}\r\n                       onClick={() => filterTasksHandler(buttonFilter)}>{title}</Button>\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} style={{padding: '20px', margin: '5px', position: 'relative'}}>\r\n            <h3 style={{wordWrap: 'break-word'}}>\r\n                <EditableSpan value={todolist.title} onChange={editTodolistTitleHandler} disabled={isDisabled}/>\r\n                <IconButton onClick={removeTodolistHandler} color={'secondary'} disabled={isDisabled}\r\n                            style={{position: 'absolute', right: '5px', top: '5px'}}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskHandler} disabled={isDisabled}/>\r\n            <List>\r\n                {tasksToRender}\r\n            </List>\r\n            <div>\r\n                {renderFilterButton('All', 'all')}\r\n                {renderFilterButton('Active', 'active')}\r\n                {renderFilterButton('Completed', 'completed')}\r\n            </div>\r\n        </Paper>\r\n    );\r\n})","import {TaskDomainType} from './tasks-reducer';\r\nimport {RootStateType} from '../../../Application/AppTypes';\r\n\r\nexport const selectTasks = (todolistId: string) => (state: RootStateType): TaskDomainType[] => state.tasks[todolistId]","import React, {FC, useCallback, useEffect} from 'react';\r\nimport {useActions, useAppSelector} from '../../common/hooks/hooks';\r\nimport {todolistsActions} from './Todolist';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from '../Login/authSelectors';\r\nimport {selectTodolists} from './Todolist/todolistSelectors';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {AddItemForm} from '../../common/components/AddItemForm/AddItemForm';\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector(selectTodolists)\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const {fetchTodolists, addTodolist} = useActions(todolistsActions)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        fetchTodolists()\r\n    }, [fetchTodolists, demo, isLoggedIn])\r\n\r\n    const addTodolistHandler = useCallback((todolistTitle: string) => {\r\n        addTodolist(todolistTitle)\r\n    }, [addTodolist])\r\n\r\n    const todolistsToRender = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Box style={{width: '290px'}}>\r\n                    <Todolist key={tl.id}\r\n                              todolist={tl}\r\n                              demo={demo}/>\r\n                </Box>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0 10px 20px'}}>\r\n            <AddItemForm addItem={addTodolistHandler}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n            {todolistsToRender}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useAppDispatch, useAppSelector} from '../../common/hooks/hooks';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {selectIsLoggedIn} from './authSelectors';\r\nimport {authActions} from './index';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const {login} = authActions\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Password must be 3 characters or more';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: async (values, formikHelpers) => {\r\n            const action = await dispatch(login(values))\r\n            if (login.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n            }\r\n            // formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/todolist-ts'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel style={{color: 'inherit'}}>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'} rel={'noreferrer'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   autoComplete=\"on\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              checked={formik.values.rememberMe}\r\n                                              {...formik.getFieldProps('rememberMe')}\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useActions, useAppSelector} from '../common/hooks/hooks';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Button from '@mui/material/Button';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Container from '@mui/material/Container';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport {createTheme, ThemeProvider} from '@mui/material';\r\nimport {Brightness4, BrightnessHigh, Menu} from '@mui/icons-material';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {authActions} from '../features/Login';\r\nimport {selectColorTheme, selectIsInitialized, selectStatus} from '../features/Application/applicationSelectors';\r\nimport {selectIsLoggedIn} from '../features/Login/authSelectors';\r\nimport {appActions} from '../features/CommonActions/AppActions';\r\nimport {appAsyncActions} from '../features/Application';\r\nimport {ErrorSnackbars} from '../common/components/ErrorSnackbar/ErrorSnackbar';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {Login} from '../features/Login/Login';\r\n\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: AppPropsType) {\r\n\r\n    const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n    const isInitialized = useAppSelector(selectIsInitialized)\r\n    const status = useAppSelector(selectStatus)\r\n    const colorTheme = useAppSelector(selectColorTheme)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {changeAppTheme} = useActions(appActions)\r\n    const {initializeApp} = useActions(appAsyncActions)\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            initializeApp()\r\n        }\r\n    }, [initializeApp, demo])\r\n\r\n    //color theme logic\r\n    const theme = createTheme({\r\n        palette: {\r\n            mode: colorTheme,\r\n            primary: {\r\n                main: '#27a1c6',\r\n            },\r\n            secondary: {\r\n                main: '#ffde7d',\r\n            },\r\n        }\r\n    })\r\n    const toggleColorTheme = () => changeAppTheme({colorTheme})\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress size={50}/>\r\n\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        logout()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbars/>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        <div>\r\n                            <IconButton onClick={toggleColorTheme}>\r\n                                {colorTheme === 'dark' ? <BrightnessHigh/> : <Brightness4/>}\r\n                            </IconButton>\r\n                            {isLoggedIn &&\r\n                                <Button color=\"inherit\" variant={'outlined'} onClick={logoutHandler}>Log out</Button>}\r\n                        </div>\r\n                    </Toolbar>\r\n                    {status === 'loading' &&\r\n                        <LinearProgress sx={{top: '60px', left: '0', right: '0', position: 'absolute'}}/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/todolist-ts'} element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/login'} element={<Login/>}/>\r\n                        <Route path={'/404'} element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                        <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                    </Routes>\r\n\r\n                </Container>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport App from './app/App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","app/hooks.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCodes","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","get","delete","todolistsAPI","title","todolistId","p","put","taskTitle","taskId","handleServerNetworkError","error","dispatch","setAppStatusAC","setAppErrorAC","message","handleServerAppError","messages","length","initialState","changeTodolistEntityStatusAC","entityStatus","type","isLoggedIn","setLoggedInAC","value","colorTheme","status","isInitialized","changeTaskEntityStatusAC","fetchTasksTC","then","res","tasks","setTasksAC","items","catch","e","updateTasksTC","model","getState","task","find","t","id","description","priority","startDate","deadline","resultCode","successfully","updateTaskAC","item","rootReducer","combineReducers","state","action","filter","todolist","restState","stateCopy","todolists","forEach","tl","map","app","auth","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","useAppDispatch","useDispatch","AddItemForm","memo","addItem","disabled","console","log","useState","itemTitle","setItemTitle","setError","addTaskHandler","trim","TextField","variant","size","label","onChange","currentTarget","onKeyDown","key","helperText","IconButton","onClick","color","AddBox","EditableSpan","props","editMode","setEditMode","text","setText","offEditMode","onBlur","autoFocus","onDoubleClick","Task","isDisabled","editTaskTitleHandler","useCallback","ListItem","disableGutters","divider","className","Completed","Checkbox","checked","New","removeTaskAC","removeTasksTC","Delete","fontSize","Todolist","demo","filterTasksHandler","addTaskAC","addTasksTC","editTodolistTitleHandler","newTitle","changeTodolistTitleAC","tasksToRender","removeTodolistAC","List","Button","TodolistsList","useEffect","addTodolist","todolistTitle","todolistsToRender","Grid","Paper","elevation","style","padding","container","spacing","to","Alert","React","ref","ErrorSnackbars","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justifyContent","FormControl","FormLabel","href","target","rel","handleSubmit","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","appState","theme","createTheme","palette","mode","primary","main","secondary","ThemeProvider","CssBaseline","AppBar","position","Toolbar","edge","Menu","Typography","BrightnessHigh","Brightness4","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19026a54.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'a3decdb3-48b2-455e-b07a-b72b7d94ecdb'\r\n    }\r\n})\r\n\r\n// API\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ id: number }>>, LoginParamsType>('/auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<'', AxiosResponse<ResponseType<{ id: number, email: string, login: string }>>, {}>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>('/auth/login')\r\n    }\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<'', AxiosResponse<TodolistType[]>, {}>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ item: TodolistType }>>, { title: string }>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(p: { todolistId: string, title: string }) {\r\n        return instance.put<'', AxiosResponse<ResponseType>, { title: string }>(`todo-lists/${p.todolistId}`, {title: p.title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<'', AxiosResponse<GetTasksType>, {}>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(p: { todolistId: string, taskTitle: string }) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>(`todo-lists/${p.todolistId}/tasks`, {title: p.taskTitle})\r\n    },\r\n    deleteTask(p: { todolistId: string, taskId: string }) {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>(`todo-lists/${p.todolistId}/tasks/${p.taskId}`)\r\n    },\r\n    updateTask(p: { todolistId: string, taskId: string }, data: UpdateTaskModelType) {\r\n        return instance.put<'', AxiosResponse<ResponseType<{ item: TaskType }>>, UpdateTaskModelType>(`todo-lists/${p.todolistId}/tasks/${p.taskId}`, data)\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    data: T\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    resultCode: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCodes {\r\n    successfully = 0,\r\n    error = 1,\r\n    captcha_required = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import {AppDispatch} from '../app/store';\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {ResultCodes, todolistsAPI, TodolistType} from '../../api/todolists-api';\r\nimport {AppThunk} from '../../app/store';\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {fetchTasksTC} from './tasks-reducer';\r\n\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: TodolistsActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'TODOLISTS/REMOVE-TODOLIST' :\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'TODOLISTS/ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'TODOLISTS/CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'TODOLISTS/CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'TODOLISTS/SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'TODOLISTS/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        case 'TODOLISTS/WIPE-TODOLISTS-DATA':\r\n            return []\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'TODOLISTS/REMOVE-TODOLIST', id: todolistId} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'TODOLISTS/ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => ({\r\n    type: 'TODOLISTS/CHANGE-TODOLIST-TITLE',\r\n    todolistId,\r\n    title\r\n} as const)\r\nexport const changeFilterAC = (todolistId: string, filter: FilterType) => ({\r\n    type: 'TODOLISTS/CHANGE-TODOLIST-FILTER',\r\n    todolistId,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({\r\n    type: 'TODOLISTS/SET-TODOLISTS',\r\n    todolists\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'TODOLISTS/CHANGE-TODOLIST-ENTITY-STATUS',\r\n    todolistId,\r\n    entityStatus\r\n} as const)\r\nexport const wipeTodolistsDataAC = () => ({type: 'TODOLISTS/WIPE-TODOLISTS-DATA'} as const)\r\n\r\n\r\n// thunk creators\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            return res.data\r\n        })\r\n        .then((todolists) => {\r\n            todolists.forEach((tl) => dispatch(fetchTasksTC(tl.id)))\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.updateTodolist({todolistId, title})\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'idle'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type WipeTodolistsDataActionType = ReturnType<typeof wipeTodolistsDataAC>\r\n\r\nexport type TodolistsActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | WipeTodolistsDataActionType","import {AppThunk} from '../../app/store';\r\nimport {authAPI, LoginParamsType, ResultCodes} from '../../api/todolists-api';\r\nimport {setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\nimport {wipeTodolistsDataAC} from '../TodolistsList/todolists-reducer';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: LoginInitialStateType = initialState, action: LoginActionTypes): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const setLoggedInAC = (value: boolean) => ({type: 'LOGIN/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunk creators\r\nexport const loginTC = (data: LoginParamsType): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(setLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = (): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(setLoggedInAC(false))\r\n                dispatch(wipeTodolistsDataAC())\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type LoginInitialStateType = typeof initialState\r\ntype LoginActionTypes = ReturnType<typeof setLoggedInAC>\r\n\r\n","import {AppThunk} from './store';\r\nimport {authAPI, ResultCodes} from '../api/todolists-api';\r\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\r\nimport {setLoggedInAC} from '../features/Login/auth-reducer';\r\n\r\nconst initialState = {\r\n    colorTheme: 'dark' as ColorThemeType,\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/CHANGE-COLOR-THEME':\r\n            return {...state, colorTheme: action.colorTheme === 'light' ? 'dark' : 'light'}\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const changeAppThemeAC = (colorTheme: ColorThemeType) => ({type: 'APP/CHANGE-COLOR-THEME', colorTheme} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\n//thunk creators\r\nexport const initializeAppTC = (): AppThunk => (dispatch) => {\r\n    authAPI.me()\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(setLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\n// types\r\nexport type ColorThemeType = 'dark' | 'light'\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppInitialStateType = typeof initialState\r\nexport type AppActionsType = ReturnType<typeof changeAppThemeAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppInitializedAC>","import {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodolistsActionType,\r\n    WipeTodolistsDataActionType\r\n} from './todolists-reducer';\r\nimport {ResultCodes, TaskType, todolistsAPI} from '../../api/todolists-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'TASKS/REMOVE-TASK' :\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'TASKS/ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{...action.task, entityStatus: 'idle'}, ...state[action.todolistId]]\r\n            }\r\n        case 'TODOLISTS/ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'TODOLISTS/REMOVE-TODOLIST':\r\n            const {[action.id]: remove, ...restState} = {...state}\r\n            return restState\r\n        case 'TODOLISTS/SET-TODOLISTS':\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        /* return action.todolists.reduce((acc, tl) => {\r\n             stateCopy[tl.id] = []\r\n             return stateCopy\r\n         }, {...state})*/\r\n        case 'TASKS/SET-TASKS':\r\n            return {...state, [action.todolistId]: [...action.tasks].map(t => ({...t, entityStatus: 'idle'}))}\r\n        case 'TASKS/UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...action.task,\r\n                    entityStatus: 'idle'\r\n                } : t)\r\n            }\r\n        case 'TASKS/CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    entityStatus: action.status\r\n                } : t)\r\n            }\r\n        case 'TODOLISTS/WIPE-TODOLISTS-DATA':\r\n            return {}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// action creators\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: 'TASKS/REMOVE-TASK', todolistId, taskId\r\n} as const)\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({\r\n    type: 'TASKS/ADD-TASK', todolistId, task\r\n} as const)\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({\r\n    type: 'TASKS/SET-TASKS', todolistId, tasks\r\n} as const)\r\nexport const updateTaskAC = (todolistId: string, taskId: string, task: TaskType) => ({\r\n    type: 'TASKS/UPDATE-TASK', todolistId, taskId, task\r\n} as const)\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, status: RequestStatusType) => ({\r\n    type: 'TASKS/CHANGE-TASK-ENTITY-STATUS', todolistId, taskId, status\r\n} as const)\r\n\r\n\r\n// thunk creators\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const addTasksTC = (todolistId: string, taskTitle: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask({todolistId, taskTitle})\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(addTaskAC(todolistId, res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const removeTasksTC = (todolistId: string, taskId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    todolistsAPI.deleteTask({todolistId, taskId})\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(removeTaskAC(todolistId, taskId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const updateTasksTC = (todolistId: string, taskId: string, model: UpdateDomainTaskModelType): AppThunk => (dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n    if (task) {\r\n        todolistsAPI.updateTask({todolistId, taskId}, {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...model\r\n        })\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.successfully) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, res.data.data.item))\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'))\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                handleServerNetworkError(e, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todolistID: string]: TaskDomainType[]\r\n}\r\n\r\nexport type TasksActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | WipeTodolistsDataActionType","import {AnyAction, applyMiddleware, combineReducers, compose, legacy_createStore as createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {authReducer} from '../features/Login/auth-reducer';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type RootState = ReturnType<typeof store.getState>\r\n\r\n\r\ntype StoreActionsType = TodolistsActionsType | TasksActionsType | AppActionsType\r\n\r\n\r\nexport type AppDispatch = ThunkDispatch<AppRootStateType, unknown, StoreActionsType>\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AnyAction>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {AppDispatch, AppRootStateType} from './store';\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\n","import React, {ChangeEvent, FC, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm: FC<AddItemFormPropsType> = memo(({addItem, disabled}) => {\r\n    console.log('AddItemForm called')\r\n\r\n    const [itemTitle, setItemTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTaskHandler = () => {\r\n        if (itemTitle.trim() === '') {\r\n            setError('Title is required')\r\n            setItemTitle('')\r\n            return\r\n        }\r\n        addItem(itemTitle.trim())\r\n        setItemTitle('')\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n        error && setError('')\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && addTaskHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       size={'small'}\r\n                       label={'Title'}\r\n                       value={itemTitle}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={onKeyDownHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={disabled}/>\r\n            <IconButton onClick={addTaskHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n    disabled: boolean\r\n}\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [text, setText] = useState(props.value)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        text.trim() !== '' && props.onChange(text)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && offEditMode()\r\n    }\r\n\r\n    return editMode && !props.disabled\r\n        ?\r\n        <TextField value={text}\r\n                   onChange={onChangeHandler}\r\n                   onBlur={offEditMode}\r\n                   onKeyDown={onKeyDownHandler}\r\n                   autoFocus/>\r\n        : <span onDoubleClick={onEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, memo, useCallback} from 'react';\r\nimport {removeTasksTC, TaskDomainType, updateTasksTC} from '../../tasks-reducer';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {TaskStatuses} from '../../../../api/todolists-api';\r\nimport {useAppDispatch} from '../../../../app/hooks';\r\nimport {Checkbox, IconButton, ListItem} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    todolistId: string\r\n    disabled: boolean\r\n}\r\nexport const Task: React.FC<TaskPropsType> = memo(({task, todolistId, disabled}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isDisabled = task.entityStatus === 'loading'\r\n\r\n    const removeTasksHandler = () => {\r\n        dispatch(removeTasksTC(todolistId, task.id))\r\n    }\r\n\r\n    const onChangeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTasksTC(todolistId, task.id, {status}))\r\n    }\r\n\r\n    const editTaskTitleHandler = useCallback((taskTitle: string) => {\r\n        dispatch(updateTasksTC(todolistId, task.id, {title: taskTitle}))\r\n    }, [dispatch, todolistId, task.id])\r\n\r\n    return (\r\n        <ListItem disableGutters divider className={task.status === TaskStatuses.Completed ? 'task isDone' : 'task'}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeCheckboxHandler}\r\n                      color={'primary'}\r\n                      size={'small'}\r\n                      disabled={isDisabled}/>\r\n            <IconButton onClick={removeTasksHandler}\r\n                        color={'secondary'}\r\n                        size={'small'}\r\n                        disabled={isDisabled}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <EditableSpan value={task.title} onChange={editTaskTitleHandler}\r\n                          disabled={disabled || isDisabled}/>\r\n        </ListItem>)\r\n})","import React, {FC, memo, useCallback, /*useEffect*/} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {addTasksTC, /*fetchTasksTC*/} from '../tasks-reducer';\r\nimport {\r\n    changeFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../todolists-reducer';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses} from '../../../api/todolists-api';\r\nimport {useAppDispatch, useAppSelector} from '../../../app/hooks';\r\nimport {Button, IconButton, List} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist: FC<TodolistPropsType> = memo(({todolist, demo = false}) => {\r\n    console.log('Todolist called')\r\n\r\n    let tasks = useAppSelector(state => state.tasks[todolist.id])\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isDisabled = todolist.entityStatus === 'loading'\r\n\r\n    switch (todolist.filter) {\r\n        case 'active':\r\n            tasks = tasks.filter(t => t.status === TaskStatuses.New)\r\n            break;\r\n        case 'completed':\r\n            tasks = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            break;\r\n    }\r\n\r\n    const filterTasksHandler = useCallback((value: FilterType) => {\r\n        return () => dispatch(changeFilterAC(todolist.id, value))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        dispatch(removeTodolistTC(todolist.id))\r\n    }\r\n\r\n    const addTaskHandler = useCallback((taskTitle: string) => {\r\n        dispatch(addTasksTC(todolist.id, taskTitle))\r\n    }, [dispatch, todolist.id])\r\n\r\n\r\n    const editTodolistTitleHandler = useCallback((newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolist.id, newTitle))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const tasksToRender = tasks && tasks.length\r\n        ? tasks.map(task => <Task key={task.id} task={task} todolistId={todolist.id}\r\n                                  disabled={isDisabled}/>)\r\n        : <span>No tasks in this list</span>\r\n\r\n   /* useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [dispatch, todolist.id, demo])*/\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={todolist.title} onChange={editTodolistTitleHandler} disabled={isDisabled}/>\r\n                <IconButton onClick={removeTodolistHandler} color={'secondary'} disabled={isDisabled}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskHandler} disabled={isDisabled}/>\r\n            <List>\r\n                {tasksToRender}\r\n            </List>\r\n            <div>\r\n                <Button size={'small'} variant={'contained'} color={todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksHandler('all')}>All</Button>\r\n                <Button size={'small'} variant={'contained'}\r\n                        color={todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksHandler('active')}>Active</Button>\r\n                <Button size={'small'} variant={'contained'}\r\n                        color={todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksHandler('completed')}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {FC, useCallback, useEffect} from 'react';\r\nimport {addTodolistTC, fetchTodolistsTC} from './todolists-reducer';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Grid, Paper} from '@mui/material';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    const addTodolist = useCallback((todolistTitle: string) => {\r\n        dispatch(addTodolistTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    const todolistsToRender = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={3} style={{padding: '20px'}}>\r\n                    <Todolist key={tl.id}\r\n                              todolist={tl}\r\n                              demo={demo}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0 20px 20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolistsToRender}\r\n        </Grid>\r\n    </>\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbars = () => {\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}\r\n                  anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from 'formik';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {loginTC} from './auth-reducer';\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Email required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password required';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be 8 characters or more';\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/todolist-ts'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel style={{color: 'inherit'}}>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'} rel={'noreferrer'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox\r\n                                              checked={formik.values.rememberMe}\r\n                                              {...formik.getFieldProps('rememberMe')}\r\n                                          />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {changeAppThemeAC, initializeAppTC} from './app-reducer';\r\nimport {useAppDispatch, useAppSelector} from './hooks';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    createTheme,\r\n    CssBaseline,\r\n    IconButton,\r\n    LinearProgress,\r\n    ThemeProvider,\r\n    Toolbar,\r\n    Typography\r\n} from '@mui/material';\r\nimport {Brightness4, BrightnessHigh, Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbars} from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Login} from '../features/Login/Login';\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: AppPropsType) {\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isInitialized = useAppSelector(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    //color theme logic\r\n    const appState = useAppSelector(state => state.app)\r\n    const theme = createTheme({\r\n        palette: {\r\n            mode: appState.colorTheme,\r\n            primary: {\r\n                main: '#27a1c6',\r\n            },\r\n            secondary: {\r\n                main: '#ffde7d',\r\n            },\r\n        }\r\n    })\r\n    const toggleColorTheme = () => dispatch(changeAppThemeAC(appState.colorTheme))\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress size={100}/>\r\n\r\n        </div>\r\n    }\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbars/>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        <div>\r\n                            <IconButton onClick={toggleColorTheme}>\r\n                                {appState.colorTheme === 'dark' ? <BrightnessHigh/> : <Brightness4/>}\r\n                            </IconButton>\r\n                            {isLoggedIn &&\r\n                                <Button color=\"inherit\" variant={'outlined'} onClick={logoutHandler}>Log out</Button>}\r\n                        </div>\r\n                    </Toolbar>\r\n                    {appState.status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Routes>\r\n                        <Route path={'/todolist-ts'} element={<TodolistsList demo={demo}/>}/>\r\n                        <Route path={'/login'} element={<Login/>}/>\r\n                        <Route path={'/404'} element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                        <Route path={'*'} element={<Navigate to={'/404'}/>}/>\r\n                    </Routes>\r\n\r\n                </Container>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport App from './app/App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
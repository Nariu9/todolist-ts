{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","app/hooks.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","ResultCodes","instance","axios","create","baseURL","withCredentials","headers","todolistsApi","get","title","post","todolistId","delete","p","put","taskTitle","taskId","data","initialState","colorTheme","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","changeTaskEntityStatusAC","updateTasksTC","model","getState","task","tasks","find","t","id","description","priority","startDate","deadline","then","res","resultCode","successfully","updateTaskAC","item","catch","e","changeTodolistEntityStatusAC","entityStatus","rootReducer","combineReducers","state","action","filter","todolist","restState","stateCopy","todolists","forEach","tl","map","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","useAppDispatch","useDispatch","AddItemForm","memo","addItem","disabled","console","log","useState","itemTitle","setItemTitle","setError","addTaskHandler","trim","TextField","variant","size","label","value","onChange","currentTarget","onKeyDown","key","helperText","IconButton","onClick","color","AddBox","EditableSpan","props","editMode","setEditMode","text","setText","offEditMode","onBlur","autoFocus","onDoubleClick","Task","isDisabled","editTaskTitleHandler","useCallback","ListItem","disableGutters","divider","className","Completed","Checkbox","checked","New","removeTaskAC","removeTasksTC","Delete","fontSize","Todolist","demo","filterTasksHandler","addTaskAC","addTasksTC","editTodolistTitleHandler","newTitle","changeTodolistTitleAC","tasksToRender","useEffect","setTasksAC","items","removeTodolistAC","List","Button","TodolistsList","addTodolist","todolistTitle","todolistsToRender","Grid","Paper","elevation","style","padding","container","spacing","Alert","React","ref","ErrorSnackbars","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","App","appState","theme","createTheme","palette","mode","primary","main","secondary","ThemeProvider","CssBaseline","AppBar","position","Toolbar","justifyContent","edge","Menu","Typography","BrightnessHigh","Brightness4","LinearProgress","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12fbaa51.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, {AxiosResponse} from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': 'a3decdb3-48b2-455e-b07a-b72b7d94ecdb'\r\n    }\r\n})\r\n\r\n// API\r\nexport const todolistsApi = {\r\n    getTodolists() {\r\n        return instance.get<'', AxiosResponse<TodolistType[]>, {}>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ item: TodolistType }>>, { title: string }>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(p: { todolistId: string, title: string }) {\r\n        return instance.put<'', AxiosResponse<ResponseType>, { title: string }>(`todo-lists/${p.todolistId}`, {title: p.title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<'', AxiosResponse<GetTasksType>, {}>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(p: { todolistId: string, taskTitle: string }) {\r\n        return instance.post<'', AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>(`todo-lists/${p.todolistId}/tasks`, {title: p.taskTitle})\r\n    },\r\n    deleteTask(p: { todolistId: string, taskId: string }) {\r\n        return instance.delete<'', AxiosResponse<ResponseType>, {}>(`todo-lists/${p.todolistId}/tasks/${p.taskId}`)\r\n    },\r\n    updateTask(p: { todolistId: string, taskId: string }, data: UpdateTaskModelType) {\r\n        return instance.put<'', AxiosResponse<ResponseType<{ item: TaskType }>>, UpdateTaskModelType>(`todo-lists/${p.todolistId}/tasks/${p.taskId}`, {...data})\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<T = {}> = {\r\n    data: T\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    resultCode: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum ResultCodes {\r\n    successfully = 0,\r\n    error = 1,\r\n    captcha_required = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    todoListId: string\r\n    order: number\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    addedDate: string\r\n}\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","const initialState = {\r\n    colorTheme: 'dark' as ColorThemeType,\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/CHANGE-COLOR-THEME':\r\n            return {...state, colorTheme: action.colorTheme === 'light' ? 'dark' : 'light'}\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const changeAppThemeAC = (colorTheme: ColorThemeType) => ({type: 'APP/CHANGE-COLOR-THEME', colorTheme}) as const\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status}) as const\r\nexport const setAppErrorAC = (error: null | string) => ({type: 'APP/SET-ERROR', error}) as const\r\n\r\n\r\n// types\r\nexport type ColorThemeType = 'dark' | 'light'\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type AppInitialStateType = typeof initialState\r\nexport type AppActionsType = ReturnType<typeof changeAppThemeAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppErrorAC>","import {AppDispatch} from '../app/store';\r\nimport {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: AppDispatch) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer';\r\nimport {ResultCodes, TaskType, todolistsApi} from '../../api/todolists-api';\r\nimport {AppRootStateType, AppThunk} from '../../app/store';\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK' :\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{...action.task, entityStatus: 'idle'}, ...state[action.todolistId]]\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const {[action.id]: remove, ...restState} = {...state}\r\n            return restState\r\n        case 'SET-TODOLISTS':\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => stateCopy[tl.id] = [])\r\n            return stateCopy\r\n        /* return action.todolists.reduce((acc, tl) => {\r\n             stateCopy[tl.id] = []\r\n             return stateCopy\r\n         }, {...state})*/\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: [...action.tasks].map(t => ({...t, entityStatus: 'idle'}))}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...action.task,\r\n                    entityStatus: 'idle'\r\n                } : t)\r\n            }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    entityStatus: action.status\r\n                } : t)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: 'REMOVE-TASK', todolistId, taskId\r\n}) as const\r\nexport const addTaskAC = (todolistId: string, task: TaskType) => ({\r\n    type: 'ADD-TASK', todolistId, task\r\n}) as const\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => ({\r\n    type: 'SET-TASKS', todolistId, tasks\r\n}) as const\r\nexport const updateTaskAC = (todolistId: string, taskId: string, task: TaskType) => ({\r\n    type: 'UPDATE-TASK', todolistId, taskId, task\r\n}) as const\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TASK-ENTITY-STATUS', todolistId, taskId, status\r\n}) as const\r\n\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsApi.getTasks(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTasksAC(todolistId, res.data.items))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const addTasksTC = (todolistId: string, taskTitle: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsApi.createTask({todolistId, taskTitle})\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(addTaskAC(todolistId, res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const removeTasksTC = (todolistId: string, taskId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n    todolistsApi.deleteTask({todolistId, taskId})\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(removeTaskAC(todolistId, taskId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const updateTasksTC = (todolistId: string, taskId: string, model: UpdateDomainTaskModelType): AppThunk => (dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'))\r\n\r\n    const task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n    if (task) {\r\n        todolistsApi.updateTask({todolistId, taskId}, {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...model\r\n        })\r\n            .then((res) => {\r\n                if (res.data.resultCode === ResultCodes.successfully) {\r\n                    dispatch(updateTaskAC(todolistId, taskId, res.data.data.item))\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'failed'))\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                handleServerNetworkError(e, dispatch)\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\ntype UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nexport type TaskDomainType = TaskType & {\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todolistID: string]: TaskDomainType[]\r\n}\r\n\r\nexport type TasksActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof changeTaskEntityStatusAC>","import {ResultCodes, todolistsApi, TodolistType} from '../../api/todolists-api';\r\nimport {AppThunk} from '../../app/store';\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\r\n\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: TodolistsActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST' :\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', id: todolistId}) as const\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist}) as const\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    todolistId,\r\n    title\r\n}) as const\r\nexport const changeFilterAC = (todolistId: string, filter: FilterType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    todolistId,\r\n    filter\r\n}) as const\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({\r\n    type: 'SET-TODOLISTS',\r\n    todolists\r\n}) as const\r\nexport const changeTodolistEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    todolistId,\r\n    entityStatus\r\n}) as const\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = (): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsApi.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsApi.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string): AppThunk => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsApi.updateTodolist({todolistId, title})\r\n        .then((res) => {\r\n            if (res.data.resultCode === ResultCodes.successfully) {\r\n                dispatch(changeTodolistTitleAC(todolistId, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'idle'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'))\r\n            }\r\n        })\r\n        .catch((e) => {\r\n            handleServerNetworkError(e, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport type TodolistsActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>","import {AnyAction, applyMiddleware, combineReducers, compose, legacy_createStore as createStore} from 'redux';\r\nimport {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {AppActionsType, appReducer} from './app-reducer';\r\nimport thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n// export type RootState = ReturnType<typeof store.getState>\r\n\r\n\r\ntype StoreActionsType = TodolistsActionsType | TasksActionsType | AppActionsType\r\n\r\n\r\nexport type AppDispatch = ThunkDispatch<AppRootStateType, unknown, StoreActionsType>\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AnyAction>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import {AppDispatch, AppRootStateType} from './store';\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\n","import React, {ChangeEvent, FC, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport {AddBox} from '@mui/icons-material';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\nexport const AddItemForm: FC<AddItemFormPropsType> = memo(({addItem, disabled}) => {\r\n    console.log('AddItemForm called')\r\n\r\n    const [itemTitle, setItemTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addTaskHandler = () => {\r\n        if (itemTitle.trim() === '') {\r\n            setError('Title is required')\r\n            setItemTitle('')\r\n            return\r\n        }\r\n        addItem(itemTitle.trim())\r\n        setItemTitle('')\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setItemTitle(e.currentTarget.value)\r\n        error && setError('')\r\n    }\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && addTaskHandler()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       size={'small'}\r\n                       label={'Title'}\r\n                       value={itemTitle}\r\n                       onChange={onChangeHandler}\r\n                       onKeyDown={onKeyDownHandler}\r\n                       error={!!error}\r\n                       helperText={error}\r\n                       disabled={disabled}/>\r\n            <IconButton onClick={addTaskHandler} color={'primary'} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {TextField} from '@mui/material';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (value: string) => void\r\n    disabled: boolean\r\n}\r\nexport const EditableSpan = memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [text, setText] = useState(props.value)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        text.trim() !== '' && props.onChange(text)\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setText(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        e.key === 'Enter' && offEditMode()\r\n    }\r\n\r\n    return editMode && !props.disabled\r\n        ?\r\n        <TextField value={text}\r\n                   onChange={onChangeHandler}\r\n                   onBlur={offEditMode}\r\n                   onKeyDown={onKeyDownHandler}\r\n                   autoFocus/>\r\n        : <span onDoubleClick={onEditMode}>{props.value}</span>\r\n})","import React, {ChangeEvent, memo, useCallback} from 'react';\r\nimport {removeTasksTC, TaskDomainType, updateTasksTC} from '../../tasks-reducer';\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\r\nimport {TaskStatuses} from '../../../../api/todolists-api';\r\nimport {useAppDispatch} from '../../../../app/hooks';\r\nimport {Checkbox, IconButton, ListItem} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskDomainType\r\n    todolistId: string\r\n    disabled: boolean\r\n}\r\nexport const Task: React.FC<TaskPropsType> = memo(({task, todolistId, disabled}) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isDisabled = task.entityStatus === 'loading'\r\n\r\n    const removeTasksHandler = () => {\r\n        dispatch(removeTasksTC(todolistId, task.id))\r\n    }\r\n\r\n    const onChangeCheckboxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\r\n        dispatch(updateTasksTC(todolistId, task.id, {status}))\r\n    }\r\n\r\n    const editTaskTitleHandler = useCallback((taskTitle: string) => {\r\n        dispatch(updateTasksTC(todolistId, task.id, {title: taskTitle}))\r\n    }, [dispatch, todolistId, task.id])\r\n\r\n    return (\r\n        <ListItem disableGutters divider className={task.status === TaskStatuses.Completed ? 'task isDone' : 'task'}>\r\n            <Checkbox checked={task.status === TaskStatuses.Completed}\r\n                      onChange={onChangeCheckboxHandler}\r\n                      color={'primary'}\r\n                      size={'small'}\r\n                      disabled={isDisabled}/>\r\n            <IconButton onClick={removeTasksHandler}\r\n                        color={'secondary'}\r\n                        size={'small'}\r\n                        disabled={isDisabled}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n            <EditableSpan value={task.title} onChange={editTaskTitleHandler}\r\n                          disabled={disabled || isDisabled}/>\r\n        </ListItem>)\r\n})","import React, {FC, memo, useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\r\nimport {addTasksTC, fetchTasksTC} from '../tasks-reducer';\r\nimport {\r\n    changeFilterAC,\r\n    changeTodolistTitleTC,\r\n    FilterType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from '../todolists-reducer';\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses} from '../../../api/todolists-api';\r\nimport {useAppDispatch, useAppSelector} from '../../../app/hooks';\r\nimport {Button, IconButton, List} from '@mui/material';\r\nimport {Delete} from '@mui/icons-material';\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist: FC<TodolistPropsType> = memo(({todolist, demo = false}) => {\r\n    console.log('Todolist called')\r\n\r\n    let tasks = useAppSelector(state => state.tasks[todolist.id])\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isDisabled = todolist.entityStatus === 'loading'\r\n\r\n    switch (todolist.filter) {\r\n        case 'active':\r\n            tasks = tasks.filter(t => t.status === TaskStatuses.New)\r\n            break;\r\n        case 'completed':\r\n            tasks = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            break;\r\n    }\r\n\r\n    const filterTasksHandler = useCallback((value: FilterType) => {\r\n        return () => dispatch(changeFilterAC(todolist.id, value))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const removeTodolistHandler = () => {\r\n        dispatch(removeTodolistTC(todolist.id))\r\n    }\r\n\r\n    const addTaskHandler = useCallback((taskTitle: string) => {\r\n        dispatch(addTasksTC(todolist.id, taskTitle))\r\n    }, [dispatch, todolist.id])\r\n\r\n\r\n    const editTodolistTitleHandler = useCallback((newTitle: string) => {\r\n        dispatch(changeTodolistTitleTC(todolist.id, newTitle))\r\n    }, [dispatch, todolist.id])\r\n\r\n    const tasksToRender = tasks && tasks.length\r\n        ? tasks.map(task => <Task key={task.id} task={task} todolistId={todolist.id}\r\n                                  disabled={isDisabled}/>)\r\n        : <span>No tasks in this list</span>\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n        dispatch(fetchTasksTC(todolist.id))\r\n    }, [dispatch, todolist.id, demo])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan value={todolist.title} onChange={editTodolistTitleHandler} disabled={isDisabled}/>\r\n                <IconButton onClick={removeTodolistHandler} color={'secondary'} disabled={isDisabled}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskHandler} disabled={isDisabled}/>\r\n            <List>\r\n                {tasksToRender}\r\n            </List>\r\n            <div>\r\n                <Button size={'small'} variant={'contained'} color={todolist.filter === 'all' ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksHandler('all')}>All</Button>\r\n                <Button size={'small'} variant={'contained'}\r\n                        color={todolist.filter === 'active' ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksHandler('active')}>Active</Button>\r\n                <Button size={'small'} variant={'contained'}\r\n                        color={todolist.filter === 'completed' ? 'secondary' : 'primary'}\r\n                        onClick={filterTasksHandler('completed')}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n})","import React, {FC, useCallback, useEffect} from 'react';\r\nimport {addTodolistTC, fetchTodolistsTC} from './todolists-reducer';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {Todolist} from './Todolist/Todolist';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\r\nimport {Grid, Paper} from '@mui/material';\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useAppSelector(state => state.todolists)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch, demo])\r\n\r\n    const addTodolist = useCallback((todolistTitle: string) => {\r\n        dispatch(addTodolistTC(todolistTitle))\r\n    }, [dispatch])\r\n\r\n    const todolistsToRender = todolists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={3} style={{padding: '20px'}}>\r\n                    <Todolist key={tl.id}\r\n                              todolist={tl}\r\n                              demo={demo}/>\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0 20px 20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {todolistsToRender}\r\n        </Grid>\r\n    </>\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {setAppErrorAC} from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbars = () => {\r\n\r\n    const error = useAppSelector(state => state.app.error)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}\r\n                  anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {changeAppThemeAC} from './app-reducer';\r\nimport {useAppDispatch, useAppSelector} from './hooks';\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    createTheme,\r\n    CssBaseline,\r\n    IconButton,\r\n    LinearProgress,\r\n    ThemeProvider,\r\n    Toolbar,\r\n    Typography\r\n} from '@mui/material';\r\nimport {Brightness4, BrightnessHigh, Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbars} from '../components/ErrorSnackbar/ErrorSnackbar';\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}:AppPropsType) {\r\n\r\n    //color theme logic\r\n    const dispatch = useAppDispatch()\r\n    const appState = useAppSelector(state => state.app)\r\n    const theme = createTheme({\r\n        palette: {\r\n            mode: appState.colorTheme,\r\n            primary: {\r\n                main: '#27a1c6',\r\n            },\r\n            secondary: {\r\n                main: '#ffde7d',\r\n            },\r\n        }\r\n    })\r\n    const toggleColorTheme = () => dispatch(changeAppThemeAC(appState.colorTheme))\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbars/>\r\n            <ThemeProvider theme={theme}>\r\n                <CssBaseline/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar style={{justifyContent: 'space-between'}}>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            Todolists\r\n                        </Typography>\r\n                        <div>\r\n                            <IconButton onClick={toggleColorTheme}>\r\n                                {appState.colorTheme === 'dark' ? <BrightnessHigh/> : <Brightness4/>}\r\n                            </IconButton>\r\n                            <Button color=\"inherit\" variant={'outlined'}>Login</Button>\r\n                        </div>\r\n                    </Toolbar>\r\n                    {appState.status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <TodolistsList demo={demo}/>\r\n                </Container>\r\n            </ThemeProvider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport App from './app/App';\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <App/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}